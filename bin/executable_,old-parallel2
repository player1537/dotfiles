#!/usr/bin/env python3
# /// script
# dependencies = [
# ]
# ///

import sys
import subprocess
import time
import shlex
import json
from typing import List, Tuple
import argparse
import os

# Global debug flag
DEBUG = False  # Set to True to enable debug output

def debug_print(*args, **kwargs):
    """Print debug information if DEBUG is True."""
    if DEBUG:
        print("DEBUG:", *args, file=sys.stderr, flush=True, **kwargs)

def parse_commands(args: List[str]) -> Tuple[str, List[str]]:
    """
    Parse command line arguments into base command and variants.
    
    Args:
        args: List of command line arguments
        
    Returns:
        Tuple of (base_command, list_of_variants)
    """
    debug_print(f"Parsing arguments: {json.dumps(args)}")
    
    if len(args) < 3:
        show_usage()
        sys.exit(1)
        
    try:
        # Find the first ':::' separator
        separator_index = args.index(':::')
        # Everything before first ::: is the base command
        base_cmd = ' '.join(args[0:separator_index])
        
        # Split remaining args by ::: to get variants
        variants = []
        current_variant = []
        
        for arg in args[separator_index+1:]:
            if arg == ':::':
                if current_variant:
                    variants.append(' '.join(current_variant))
                    current_variant = []
            else:
                current_variant.append(arg)
                
        # Add the last variant if it exists
        if current_variant:
            variants.append(' '.join(current_variant))
            
        if not variants:
            show_usage()
            sys.exit(1)
            
        debug_print("Parsed command structure:", json.dumps({
            "base_command": base_cmd,
            "variants": variants
        }, indent=2))
            
        return base_cmd.strip(), variants
        
    except ValueError:
        debug_print("Error: No ::: separator found in arguments")
        show_usage()
        sys.exit(1)

def show_usage():
    """Display usage instructions."""
    print("Usage: doit.py <base command> ::: <variant 1> ::: <variant 2> ... ::: <variant N>")
    print("Example: doit.py 'echo test' ::: 'arg1' ::: 'arg2' ::: 'arg3'")
    print("\nSet DEBUG=1 in environment to enable debug output")

def create_tmux_session(session_name: str):
    """Create a new tmux session."""
    cmd = ['tmux', 'new-session', '-d', '-s', session_name]
    debug_print(f"Creating tmux session: {' '.join(cmd)}")
    subprocess.run(cmd, check=True)

def run_commands(base_cmd: str, variants: List[str]):
    """
    Create tmux session and run commands in parallel panes.
    
    Args:
        base_cmd: The base command to run
        variants: List of command variants to append to base command
    """
    # Create unique session name
    session_name = f"parallel_{int(time.time())}"
    debug_print(f"Creating session: {session_name}")
    
    try:
        # Start new tmux session
        create_tmux_session(session_name)
        
        # For each variant, create a pane and run the command
        for i, variant in enumerate(variants):
            if i > 0:
                time.sleep(1)

                # Split window horizontally for all but first command
                cmd = ['tmux', 'split-window', '-h', '-t', session_name]
                debug_print(f"Splitting window: {' '.join(cmd)}")
                subprocess.run(cmd, check=True)
                
                # Redistribute space evenly
                cmd = ['tmux', 'select-layout', '-t', session_name, 'tiled']
                debug_print(f"Setting layout: {' '.join(cmd)}")
                subprocess.run(cmd, check=True)
            
            # Construct and run the full command
            full_cmd = f"{base_cmd} {variant}"
            cmd = ['tmux', 'send-keys', '-t', session_name, full_cmd, 'C-m']
            debug_print(f"Running command in pane {i}: {full_cmd}")
            debug_print(f"tmux command: {' '.join(cmd)}")
            subprocess.run(cmd, check=True)
        
        # Attach to the session
        cmd = ['tmux', 'attach-session', '-t', session_name]
        debug_print(f"Attaching to session: {' '.join(cmd)}")
        subprocess.run(cmd, check=True)
        
    except subprocess.CalledProcessError as e:
        debug_print(f"Error running tmux command: {e}")
        debug_print(f"Failed command: {' '.join(e.cmd)}")
        debug_print(f"Return code: {e.returncode}")
        print(f"Error running tmux commands: {e}", file=sys.stderr)
        sys.exit(1)

def main():
    """Main entry point."""
    global DEBUG
    DEBUG = bool(os.environ.get('DEBUG', ''))
    debug_print("Debug mode enabled")
    
    if len(sys.argv) < 2:
        show_usage()
        sys.exit(1)
    
    # Parse command line arguments
    base_cmd, variants = parse_commands(sys.argv[1:])
    
    # Run commands in tmux
    run_commands(base_cmd, variants)

if __name__ == "__main__":
    main()
