#!/usr/bin/env uv run --script
# /// script
# dependencies = [
#     "mediocreatbest",
# ]
# ///

"""

"""

from __future__ import annotations
from mediocreatbest import auto


def main(key: str, format: str='+%B:%P'):
    key = key.encode('utf-8')
    key = auto.hashlib.sha256(key)
    key = key.digest()
    key = auto.numpy.frombuffer(key, dtype='u1')
    key = key[:6]
    key = key & ~auto.numpy.array([0xFF, 0x00, 0x00, 0x00, 0x80, 0x00], dtype='u1')
    key = key | auto.numpy.array([0x7F, 0x00, 0x00, 0x00, 0x80, 0x00], dtype='u1')
    binds = [f'{key[0]}', f'{key[1]}', f'{key[2]}', f'{key[3]}']
    bind = '.'.join(binds)
    ports = [f'8{int(key[5])}']
    port = f'{int(key[4]) << 8 | int(key[5])}'

    assert format.startswith('+')
    def emit(s: str):
        print(s, end='')

    for fmt in auto.re.finditer(r'%%|%b|%p|%.|.', format[1:]):
        fmt = fmt.group(0)
        if fmt == '%%':
            emit('%')
        elif fmt == '%B':
            emit(bind)
        elif fmt == '%b':
            emit(binds.pop(0))
        elif fmt == '%P':
            emit(port)
        elif fmt == '%p':
            emit(ports.pop(0))
        elif fmt.startswith('%'):
            raise NotImplementedError()
        else:
            emit(fmt)

    emit('\n')


def cli():
    main(*auto.sys.argv[1:])


if __name__ == '__main__':
    cli()
